# bot.py
import asyncio
import logging
import time
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, API_URL, ADMIN_ID
from database import conn, cursor, get_last_price, update_last_price, is_banned, block_user

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

last_price = get_last_price()
user_message_times = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")],
        [KeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")]
    ],
    resize_keyboard=True
)

start_message = (
    "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
    "–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –≤ —Ç–æ–∫–µ–Ω–µ YOUR_TOKEN. "
    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–ª–µ–¥–∏ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –±–æ—Ç–µ!\n\n"
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: <a href='https://t.me/your_username'>@yourusername</a>\n\n"
    "‚ùóÔ∏è –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
    "<a href='https://t.me/your_channel'><b>–ö–∞–Ω–∞–ª</b></a> | "
    "<a href='https://t.me/your_chat'><b>–ß–∞—Ç</b></a>"
)

def get_fpi_price():
    try:
        response = requests.get(API_URL).json()
        if response and response.get("pairs"):
            pair_data = response["pairs"][0]
            price_usd = round(float(pair_data["priceUsd"]), 5)
            price_ton = round(float(pair_data["priceNative"]), 5)
            return price_usd, price_ton
        else:
            logging.warning("‚ùóÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            return None, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None

async def is_spamming(user_id: int):
    global user_message_times
    current_time = time.time()
    if user_id in user_message_times:
        last_message_time = user_message_times[user_id]
        if current_time - last_message_time < 1:
            return True
    user_message_times[user_id] = current_time
    return False

async def monitoring_task():
    global last_price
    rub_exchange_rate = 96.78

    while True:
        cursor.execute("SELECT user_id, tokens FROM users WHERE monitoring=1")
        users = cursor.fetchall()
        price_usd, price_ton = get_fpi_price()

        if price_usd is not None and price_ton is not None:
            change_text = ""
            if last_price is not None:
                change_percent = round(((price_usd - last_price) / last_price) * 100, 2) if last_price != 0 else 0
                if abs(change_percent) > 0.01:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ > 0.01%
                    if change_percent > 0:
                        change_text = f"\n‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{change_percent}% üü¢\n"
                    elif change_percent < 0:
                        change_text = f"\n‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent}% üî¥\n"
                    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ <= 0.01%, change_text –æ—Å—Ç–∞—ë—Ç—Å—è –ø—É—Å—Ç—ã–º
            last_price = price_usd
            update_last_price(last_price)

            fdv = round(price_usd * 1_000_000_000 / 1_000_000, 1)
            fdv_text = f"{fdv}M USD‚ÇÆ"

            for user_id, tokens in users:
                if is_banned(user_id):
                    continue

                total_value = round(tokens * price_usd, 2)
                msg = (
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{int(total_value) if total_value.is_integer() else total_value} USD‚ÇÆ</b>\n"
                    f"–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã: {int(tokens) if tokens.is_integer() else tokens}\n\n"
                    f"üí∞ –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {price_usd} USD‚ÇÆ ‚âà {round(price_usd * rub_exchange_rate, 2)} RUB\n"
                    f"üíé –¶–µ–Ω–∞ –≤ TON: {price_ton} TON\n"
                    f"‚õΩÔ∏è –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {fdv_text}\n"
                )
                if change_text:
                    msg += f"{change_text}"

                try:
                    await bot.send_message(user_id, msg, parse_mode="HTML")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(60)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if is_banned(message.from_user.id):
        await message.answer("‚ùóÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    await bot.send_message(
        message.from_user.id,
        start_message,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=keyboard
    )

@dp.message(lambda msg: msg.text == "–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
async def enter_tokens(message: types.Message):
    if await is_spamming(message.from_user.id):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:")

@dp.message(lambda msg: msg.text.replace('.', '', 1).isdigit())
async def save_tokens(message: types.Message):
    if await is_spamming(message.from_user.id):
        return
    if is_banned(message.from_user.id):
        await message.answer("‚ùóÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    tokens = float(message.text)
    cursor.execute("INSERT INTO users (user_id, tokens, monitoring) VALUES (?, ?, 1) ON CONFLICT(user_id) DO UPDATE SET tokens=?, monitoring=1", (message.from_user.id, tokens, tokens))
    conn.commit()
    await message.answer("‚ùóÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.")

@dp.message(lambda msg: msg.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def stop_monitoring(message: types.Message):
    if await is_spamming(message.from_user.id):
        return
    if is_banned(message.from_user.id):
        await message.answer("‚ùóÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    cursor.execute("SELECT monitoring FROM users WHERE user_id=?", (message.from_user.id,))
    result = cursor.fetchone()
    if result and result[0] == 0:
        await message.answer("‚ùóÔ∏è –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
    else:
        cursor.execute("UPDATE users SET monitoring=0 WHERE user_id=?", (message.from_user.id,))
        conn.commit()
        await message.answer("‚ùóÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω.")

@dp.message(lambda msg: msg.text.startswith("/block"))
async def block_user_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /block <ID>")
        return
    user_id_to_block = int(parts[1])
    block_user(user_id_to_block)
    await message.answer(f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_block} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

async def start_bot():
    asyncio.create_task(monitoring_task())
    await dp.start_polling(bot)